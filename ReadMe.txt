Zum starten des Server muss man "node index.js" im Terminal eingebegen. Durch "node creatInstance.js" kann man es testen.

Framework und Bibliotheken: Der Server ist in Node.js mit Express aufgebaut. 
Er nutzt unter anderem axios f√ºr HTTP-Anfragen, async-mutex und async-sema f√ºr asynchrone Ressourcensteuerung und einige Module wie mathjs f√ºr mathematische Berechnungen.

Kernfunktionen: Der Server simuliert einen Krankenhausablauf, bei dem Patienten bestimmte Behandlungen in einer bestimmten Reihenfolge durchlaufen. 
Die Verteilung der Diagnosen und die Ressourcen (z.B. Anzahl der Pflegekr√§fte) werden dynamisch verwaltet.

Systemzustand und Ressourcen: Der SystemState verwaltet, wo sich Patienten im System befinden. 
Die Ressourcen (resources) geben an, wie viele Einheiten jeder Ressource verf√ºgbar sind.

Zu beginn checkt der Server welche Rolle (z.B. intake, emTreatment) und die zugeh√∂rige Funktion aufgrufen wird. 
AdmitPatient checkt, ob der Patient eine ID hat oder ein Emergency hat.
Treffen die Konditionen ein, wie keine ID und kein Emergency, oder kein Platz im intake oder zu viele im Nursing bereich, so wird der Patient neu geplant.

Diagnosen und Wahrscheinlichkeiten: Diagnosen werden mit bestimmten Wahrscheinlichkeiten generiert und basieren auf vordefinierten Datens√§tzen (diagnosesProbability).
Durch timeConsumptionData.js wird die Dauer der jeweilige Rolle ermittelt.

Simulated Annealing f√ºr Terminplanung: Der AppointmentManager enth√§lt eine Methode, die simulated annealing verwendet, 
um optimale Termine f√ºr Behandlungen zu finden und √úberlappungen zu minimieren.
           1. Initialisierung:
           
            Sucht eine zuf√§llige Anfangsl√∂sung.
            Setze die anf√§ngliche Temperatur auf einen hohen Wert

           2. Iterationen:
            Wiederhole f√ºr eine bestimmte Anzahl von Iterationen oder bis die Temperatur auf einen Minimalwert gesunken ist.
                a. Nachbarschaftssuche:
                Erzeuge eine neue L√∂sung in der Nachbarschaft der aktuellen L√∂sung 
‚Äã                b. Berechnung der Kosten (Energie):
                Berechne die Kostenfunktion f√ºr die aktuelle L√∂sung und die neue L√∂sung 
                c. Akzeptanzkriterium:
                Berechne die Differenz der Kosten
                Wenn Œîùê∏<0, akzeptiere die neue L√∂sung (da sie eine bessere L√∂sung darstellt).
                Wenn Œîùê∏‚â•0, akzeptiere die neue L√∂sung mit einer Wahrscheinlichkeit ùëÉ=exp‚Å°(‚àíŒîùê∏/ùëá)
                d. Aktualisierung der Temperatur:
                Senke die Temperatur gem√§√ü einer Abk√ºhlungsfunktion
                
            3 Abbruchkriterium:
            Beende den Algorithmus, wenn die Temperatur auf einen vorgegebenen Minimalwert gesunken ist 
            oder die maximale Anzahl an Iterationen erreicht ist.
